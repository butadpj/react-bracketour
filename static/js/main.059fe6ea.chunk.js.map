{"version":3,"sources":["components/Input/Input.js","components/Header/Header.js","components/Button/Button.js","components/Form/Form.js","components/Brackets/Brackets.js","utils/addClassTo.js","utils/randomNumberBetween.js","utils/getMatchedPlayers.js","api/names.js","reducers/tournamentReducer.js","utils/shuffle.js","utils/groupArrayBy.js","App.js","utils/regexValidate.js","index.js"],"names":["Input","value","status","onChange","htmlFor","id","className","type","placeholder","Header","Button","children","classNames","disabled","onClick","join","Form","onSubmit","Brackets","props","addClassTo","element","classList","add","Array","isArray","second","setTimeout","remove","randomNumberBetween","min","max","Math","floor","random","getMatchedPlayers","target","callback","name","firstElementChild","dataset","document","querySelectorAll","forEach","player","names","tournamentReducer","state","action","shuffledNames","array","randomIndex","newArray","currentIndex","length","shuffle","payload","playerCount","number","players","Number","map","_","i","score","showConnectors","previousRound","groupCount","groupedPlayers","groupNumber","perGroup","ceil","fill","slice","groupArrayBy","filter","round","winners","group","winner","numbersOnly","pattern","patternType","fn","regexValidate","tournamentRounds","App","React","useReducer","tournamentState","dispatch","useState","participantsInput","setParticipantsInput","inputStatus","setInputStatus","showForm","setShowForm","showBrackets","setShowBrackets","buttonDisabled","setButtonDisabled","minElementRef","useRef","maxElementRef","bracketsRef","makePlayerGlow","closest","removePlayerGlow","useEffect","inputValidationResult","test","valid","error","current","removeAfterSecond","timeOutId","latestRound","winnerName","alert","addEventListener","e","handleMouseOver","handleMouseOut","contains","matchedPlayers","clearInterval","preventDefault","ref","Fragment","data-name","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.059fe6ea.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css';\n\nconst Input = ({value = '', status='', onChange}) => {\n  return (\n    <>\n      <label htmlFor=\"participant-input\">Enter the number of participants</label>\n      <input \n        id=\"participant-input\"\n        value={value}\n        className={`input ${status}`}\n        type=\"text\" \n        placeholder=\"2\" \n        onChange={onChange}\n      />\n    </>\n  )\n}\n\nexport default Input\n","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className=\"main__title\">Bracketour</h1>\n      <h4 className=\"sub__title\">Create brackets for tournament</h4>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react';\nimport './Button.css';\n\nconst Button = (\n    {\n      children,\n      type = 'button',\n      classNames = [],\n      disabled = false,\n      onClick = () => {}\n    }\n  ) => {\n  return (\n    <button \n      disabled={disabled}\n      onClick={onClick}\n      type={type} \n      className={`btn ${classNames.join(' ')}`}>\n        {children}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react';\nimport './Form.css';\n\nconst Form = ({children, onSubmit}) => {\n  return (\n    <form onSubmit={onSubmit} className=\"participant-form\">\n      {children}\n    </form>\n  )\n}\n\nexport default Form\n","import './Brackets.css';\n\nconst Brackets = (props) => {\n  return props.children\n}\n\nexport default Brackets\n","export const addClassTo = (className, element) => {\r\n  if (typeof className === 'string') element.classList.add(className);\r\n  if (Array.isArray(className)) element.classList.add(...className);\r\n  return second => {\r\n    setTimeout(() => {element.classList.remove(className)}, (second * 1000))\r\n  }\r\n}","export const randomNumberBetween = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","export const getMatchedPlayers = target => callback => {\n  const name = target.firstElementChild.dataset.name;\n  const mathcedPlayers = (\n    document.querySelectorAll(`[data-name='${name}']`)\n  )\n\n  mathcedPlayers.forEach(player => {\n    callback(player);\n  })\n}","export const names = [\r\n  \"Saunders\",\r\n  \"Tate\",\r\n  \"Mack\",\r\n  \"Hammond\",\r\n  \"Carrillo\",\r\n  \"Townsend\",\r\n  \"Wise\",\r\n  \"Ingram\",\r\n  \"Barton\",\r\n  \"Mejia\",\r\n  \"Ayala\",\r\n  \"Schroeder\",\r\n  \"Hampton\",\r\n  \"Rowe\",\r\n  \"Parsons\",\r\n  \"Frank\",\r\n  \"Waters\",\r\n  \"Strickland\",\r\n  \"Osborne\",\r\n  \"Maxwell\",\r\n  \"Chan\",\r\n  \"Deleon\",\r\n  \"Norman\",\r\n  \"Harrington\",\r\n  \"Casey\",\r\n  \"Patton\",\r\n  \"Logan\",\r\n  \"Bowers\",\r\n  \"Mueller\",\r\n  \"Glover\",\r\n  \"Floyd\",\r\n  \"Hartman\",\r\n  \"Buchanan\",\r\n  \"Cobb\",\r\n  \"French\",\r\n  \"Kramer\",\r\n  \"Mccormick\",\r\n  \"Clarke\",\r\n  \"Tyler\",\r\n  \"Gibbs\",\r\n  \"Hogan\",\r\n  \"Pham\",\r\n  \"Lang\",\r\n  \"Pratt\",\r\n  \"Lara\",\r\n  \"Brock\",\r\n  \"Ballard\",\r\n  \"Trujillo\",\r\n  \"Shaffer\",\r\n  \"Drake\",\r\n]","import { \n  shuffle, \n  groupArrayBy,\n  randomNumberBetween\n} from '../utils';\n\nexport const tournamentReducer = (state, action) => {\n  switch(action.type) {\n    case 'GENERATE_1ST_ROUND_BRACKETS': {\n      const shuffledNames = shuffle(action.payload.names);\n      const playerCount = action.payload.playerCount;\n\n      const generatedPlayers = [...Array(Number(playerCount))].map((_, i) => (\n        { name: shuffledNames[i], score: 0}\n      ));\n\n      return [\n        {\n          number: 1,\n          players: generatedPlayers,\n          showConnectors: false,\n        }\n      ]\n    }\n\n    case 'NEXT_ROUND': {\n      const previousRound = action.payload.previousRound;\n      const groupCount = action.payload.groupCount;\n\n      const currentPlayers = state.filter(round => (\n        round.number === previousRound\n      ))[0].players;\n\n      const groupedPlayers = groupArrayBy(currentPlayers, groupCount);\n\n      const getWinnersFromGroupedArray = (groupedArray) => {\n        const selectRandomWinner = (array) => {\n          if (array.length > 1) \n            return array[randomNumberBetween(0, 1)]  \n          return array[0];    \n        } \n        \n        const winners = groupedArray.map(group => {\n          const winner = selectRandomWinner(group);\n\n          // State mutation alert!!!\n          // I've tried to avoid mutating states but\n          // this is a lot simpler that doing immutable\n          // updates with the current data structure I'm\n          // using. The 'random generated winner' algorithm \n          // has introduced a lot of complexity to the \n          // data structure.\n\n          // I'm only mutating the players object on the\n          // previous round and the winners' scores will\n          // be reset to 0 on the next round, so there\n          // shouldn't be unexpected bugs to encounter. \n          winner.score = randomNumberBetween(2, 3);\n\n          group.map(player => {\n            if (player.score === 0) {\n              \n              // will also mutate the state\n              player.score = randomNumberBetween(0, 1);\n              return player\n            }\n            return player\n          })\n\n          return winner\n        })\n        \n        return winners\n      }\n\n      const winners = getWinnersFromGroupedArray(groupedPlayers);\n\n      return [\n        ...state.map(round => round.number === previousRound ? (\n          {...round, showConnectors: true}\n        ) : (\n          round\n        )),\n        { \n          number: previousRound + 1, \n          players: winners.map(winner => ({...winner, score: 0}))\n        } \n      ]\n    }\n\n    default: {\n      return state\n    }\n  }\n}","export const shuffle = (array) => {\n  const newArray = [...array];\n\n  let currentIndex = newArray.length\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [newArray[currentIndex], newArray[randomIndex]] = [\n      newArray[randomIndex], newArray[currentIndex]\n    ];\n  }\n\n  return newArray;\n}","export const groupArrayBy = (array, groupNumber) => {\n  const perGroup = Math.ceil(array.length / groupNumber);\n  return new Array(groupNumber)\n    .fill('')\n    .map((_, i) => array.slice(i * perGroup, (i + 1) * perGroup));\n}","import React from 'react';\nimport { Header, Input, Form, Button, Brackets } from './components';\nimport { regexValidate, addClassTo, getMatchedPlayers } from './utils';\nimport { names } from './api/names';\nimport { tournamentReducer } from './reducers/tournamentReducer';\nimport './App.css';\n\nconst numbersOnly = regexValidate('number');\nconst MAX_PARTICIPANTS = 50;\nconst MIN_PARTICIPANTS = 2;\n\nconst tournamentRounds = [\n  // {\n  //   number: 1,\n  //   players: [\n  //    { name: 'First', score; 2 },\n  //    { name: 'Second', score; 1 },\n  //   ],\n  //   showConnectors: true,\n  // },\n  // {\n  //   number: 2,\n  //   players: [\n  //    { name: 'First', score; 'W' },\n  //   ]\n  //   showConnectors: false,\n  // },\n];\n\nconst App = () => {\n  const [tournamentState, dispatch] = React.useReducer(\n    tournamentReducer,\n    tournamentRounds,\n  );\n\n  const [participantsInput, setParticipantsInput] = React.useState('');\n  const [inputStatus, setInputStatus] = React.useState(null);\n\n  const [showForm, setShowForm] = React.useState(true);\n  const [showBrackets, setShowBrackets] = React.useState(false);\n  const [buttonDisabled, setButtonDisabled] = React.useState(false);\n\n  const minElementRef = React.useRef(null);\n  const maxElementRef = React.useRef(null);\n  const bracketsRef = React.useRef(null);\n\n  // No previous round yet, so we start at 0\n  const previousRound = React.useRef(0);\n  const groupCount = React.useRef(0);\n\n  const handleInputChange = (e) => {\n    setParticipantsInput(e.target.value);\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    setShowForm(false);\n    setShowBrackets(true);\n    groupCount.current = Math.ceil(participantsInput / 2);\n    dispatch({\n      type: 'GENERATE_1ST_ROUND_BRACKETS',\n      payload: {\n        names: names,\n        playerCount: participantsInput,\n      },\n    });\n  };\n\n  const handleEditBrackets = () => {\n    setShowForm(true);\n    setShowBrackets(false);\n    setButtonDisabled(false);\n\n    previousRound.current = 0;\n    groupCount.current = 0;\n  };\n\n  const handleNextRound = () => {\n    previousRound.current = previousRound.current + 1;\n\n    dispatch({\n      type: 'NEXT_ROUND',\n      payload: {\n        previousRound: previousRound.current,\n        groupCount: groupCount.current,\n      },\n    });\n\n    groupCount.current = Math.ceil(groupCount.current / 2);\n  };\n\n  const makePlayerGlow = (player) => {\n    player.closest('.player').classList.add('active');\n    player.classList.add('active');\n  };\n\n  const removePlayerGlow = (player) => {\n    player.closest('.player').classList.remove('active');\n    player.classList.remove('active');\n  };\n\n  // Input Validation\n  React.useEffect(() => {\n    if (participantsInput) {\n      const inputValidationResult = numbersOnly((pattern) => {\n        if (\n          participantsInput && // not empty\n          pattern.test(participantsInput) && // valid number\n          Number(participantsInput) <= MAX_PARTICIPANTS &&\n          Number(participantsInput) >= MIN_PARTICIPANTS\n        )\n          return {\n            valid: true,\n          };\n\n        if (Number(participantsInput) > MAX_PARTICIPANTS)\n          return {\n            valid: false,\n            error: 'max',\n          };\n\n        if (Number(participantsInput) < MIN_PARTICIPANTS)\n          return {\n            valid: false,\n            error: 'min',\n          };\n\n        // default\n        return {\n          valid: false,\n          error: 'Please input a valid number',\n        };\n      });\n\n      setInputStatus(inputValidationResult);\n\n      if (!inputValidationResult.valid) {\n        if (inputValidationResult.error === 'min') {\n          const removeAfterSecond = addClassTo(\n            'apply-shake',\n            minElementRef.current,\n          );\n          removeAfterSecond(1.5);\n        }\n        if (inputValidationResult.error === 'max') {\n          const removeAfterSecond = addClassTo(\n            'apply-shake',\n            maxElementRef.current,\n          );\n          removeAfterSecond(1.5);\n        }\n      }\n      return;\n    }\n\n    setInputStatus(null);\n  }, [participantsInput]);\n\n  // Check for a final winner and hover feature\n  React.useEffect(() => {\n    let timeOutId;\n    if (tournamentState.length) {\n      const latestRound = tournamentState[tournamentState.length - 1];\n      if (latestRound.players.length === 1) {\n        const winnerName = latestRound.players[0].name;\n        latestRound.players[0].score = 'W'; // mutate state\n        setButtonDisabled(true);\n        timeOutId = setTimeout(() => {\n          alert(`The winnner of this tournament is: ${winnerName}`);\n        }, 200);\n      }\n\n      bracketsRef.current.addEventListener('mouseover', (e) => {\n        handleMouseOver(e);\n      });\n\n      bracketsRef.current.addEventListener('mouseout', (e) => {\n        handleMouseOut(e);\n      });\n\n      const handleMouseOver = (e) => {\n        if (e.target.classList.contains('player')) {\n          const matchedPlayers = getMatchedPlayers(e.target);\n\n          matchedPlayers((player) => {\n            makePlayerGlow(player);\n          });\n        }\n\n        if (\n          e.target.classList.contains('player__name') ||\n          e.target.classList.contains('player__score')\n        ) {\n          const matchedPlayers = getMatchedPlayers(e.target.closest('.player'));\n\n          matchedPlayers((player) => {\n            makePlayerGlow(player);\n          });\n        }\n      };\n\n      const handleMouseOut = (e) => {\n        if (e.target.classList.contains('player')) {\n          const matchedPlayers = getMatchedPlayers(e.target);\n\n          matchedPlayers((player) => {\n            removePlayerGlow(player);\n          });\n        }\n\n        if (\n          e.target.classList.contains('player__name') ||\n          e.target.classList.contains('player__score')\n        ) {\n          const matchedPlayers = getMatchedPlayers(e.target.closest('.player'));\n\n          matchedPlayers((player) => {\n            removePlayerGlow(player);\n          });\n        }\n      };\n    }\n\n    return () => {\n      clearInterval(timeOutId);\n    };\n  }, [tournamentState]);\n\n  return (\n    <div className='app'>\n      <Header />\n      {showForm && (\n        <Form onSubmit={handleFormSubmit}>\n          <Input\n            value={participantsInput}\n            onChange={handleInputChange}\n            status={\n              inputStatus ? (inputStatus.valid ? 'success' : 'danger') : ''\n            }\n          />\n          <div className='constraints'>\n            <h4 className='min' ref={minElementRef}>\n              min: {MIN_PARTICIPANTS}\n            </h4>\n            <h4 className='max' ref={maxElementRef}>\n              max: {MAX_PARTICIPANTS}\n            </h4>\n          </div>\n          <Button\n            type='submit'\n            disabled={inputStatus ? (inputStatus.valid ? false : true) : true}\n            classNames={[\n              'submit__btn',\n              `${\n                inputStatus ? (inputStatus.valid ? '' : 'disabled') : 'disabled'\n              }`,\n            ]}\n          >\n            Generate\n          </Button>\n        </Form>\n      )}\n      {showBrackets && (\n        <Brackets>\n          <div className='brackets-nav'>\n            <Button onClick={handleEditBrackets} classNames={['btn--outline']}>\n              Edit Brackets\n            </Button>\n            <Button\n              disabled={buttonDisabled}\n              onClick={handleNextRound}\n              classNames={[buttonDisabled ? 'disabled' : '']}\n            >\n              Next round\n            </Button>\n          </div>\n          <main className='brackets-main' ref={bracketsRef}>\n            {tournamentState.map((round, i) => (\n              <React.Fragment key={i}>\n                <div key={round.number} className={`round${round.number}`}>\n                  {round.players.map((player, i) => (\n                    <div\n                      key={i}\n                      className={`player ${\n                        player.score === 'W' ? 'winner' : ''\n                      }`}\n                    >\n                      <div\n                        className={`player__name ${\n                          player.score === 'W' ? 'winner' : ''\n                        }`}\n                        data-name={player.name}\n                      >\n                        {player.name}\n                      </div>\n                      <div className='player__score'>{player.score}</div>\n                    </div>\n                  ))}\n                </div>\n                {round.showConnectors && (\n                  <>\n                    <div className={`connectors-r${round.number}`}>\n                      {[...Array(Math.ceil(round.players.length / 2))].map(\n                        (_, i) => (\n                          <div key={i}></div>\n                        ),\n                      )}\n                    </div>\n                    <div className={`lines-r${round.number}`}>\n                      {[...Array(Math.ceil(round.players.length / 4))].map(\n                        (_, i) => (\n                          <div key={i}></div>\n                        ),\n                      )}\n                    </div>\n                  </>\n                )}\n              </React.Fragment>\n            ))}\n          </main>\n        </Brackets>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const regexValidate = (patternType = '') => {\r\n  if (patternType) {\r\n    let pattern;\r\n\r\n    if (patternType === 'number') pattern = /^[0-9]*$/\r\n    if (patternType === 'letter') pattern = /[A-Za-z]/\r\n\r\n    return fn => fn(pattern)\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}